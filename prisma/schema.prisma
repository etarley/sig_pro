// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model User {
  id        String    @id @default(cuid())
  name      String
  email     String    @unique
  emailVerified DateTime?
  image     String?
  role      Role      @relation(fields: [roleId], references: [id])
  roleId    String
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @default(now()) @map(name: "updated_at")

  accounts  Account[]
  sessions  Session[]
  ownedBoards TaskBoard[] @relation("TaskBoardOwner")
  memberBoards TaskBoard[] @relation("TaskBoardUsers")
  comments  Comment[]
  tasks     Task[]
  notifications Notification[]

  @@map(name: "users")
}

model Role {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  users User[]

  @@map(name: "roles")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model TaskBoard {
  id          String   @id @default(cuid())
  title       String
  description String?
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @default(now()) @map(name: "updated_at")
  ownerId     String
  owner       User     @relation("TaskBoardOwner", fields: [ownerId], references: [id], onDelete: Cascade)

  tasks       Task[]
  users       User[]   @relation("TaskBoardUsers")

  @@map(name: "task_boards")
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus
  priority    TaskPriority
  dueDate     DateTime?
  createdAt   DateTime   @default(now()) @map(name: "created_at")
  updatedAt   DateTime   @default(now()) @map(name: "updated_at")
  boardId     String
  board       TaskBoard  @relation(fields: [boardId], references: [id])

  assignees User[] // Many-to-many relationship
  comments  Comment[]
  attachments Attachment[]

  @@map(name: "tasks")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@map(name: "comments")
}

model Notification {
  id        String   @id @default(cuid())
  content   String
  read      Boolean
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@map(name: "notifications")
}

model Attachment {
  id        String   @id @default(cuid())
  file      String
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id])

  @@map(name: "attachments")
}

enum TaskStatus {
  TO_DO
  IN_PROGRESS
  DONE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
